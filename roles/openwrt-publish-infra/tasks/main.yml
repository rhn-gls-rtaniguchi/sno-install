---
# Network Configuration

- name: enable passwordless authentication
  uci: 
    command: set
    key: "dropbear.@dropbear[0].{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ ssh_auth }}" 


- name: add instructor's public key into dropbear authorized keys
  ansible.builtin.blockinfile: 
    path: /etc/dropbear/authorized_keys
    create: true
    block: |
      {{ lookup('file', '{{ instructor_ssh_pubkey }}') }}

- name: update opkg cache
  opkg: 
    name: '{{ item }}'
  loop:
  - kmod-usb-storage
  - block-mount
  - wget 
  - tar
  ignore_errors: true

- name: Create /mnt/extstorage directory to store TFTP files
  ansible.builtin.file: 
    path: /mnt/extstorage
    state: directory
    group: nogroup
    owner: nobody
    mode: "0755"

- name: Delete mountpoint configuration in fstab if exists 
  uci: 
    command: delete
    key: fstab.@mount[0]
  ignore_errors: true

- name: Create mountpoint in fstab
  uci: 
    command: add
    key: fstab
    value: mount

- name: Configure mountpoint in fstab
  uci: 
    command: set
    key: "fstab.@mount[0].{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ mntpoint }}"
  notify:
    - start fstab

- name: Reboot router to persist directories
  ansible.builtin.reboot: 
    reboot_timeout: 120
    reboot_command: reboot
    test_command: ping -c 2 localhost

- name: Create /mnt/extstorage directory to store TFTP files
  ansible.builtin.file: 
    path: "{{ item }}"
    state: directory
    group: nogroup
    owner: nobody
    mode: "0755"
  loop:
    - /mnt/extstorage/tftp/
    - /mnt/extstorage/tftp/pxelinux.cfg
    - /mnt/extstorage/tftp/disks

- name: Copy NFS exports
  ansible.builtin.copy: 
    src: exports
    dest: /etc/exports

- name: Reboot router to persist directories
  ansible.builtin.reboot: 
    reboot_timeout: 120
    reboot_command: reboot
    test_command: ping -c 2 localhost

- name: Download syslinux files
  local_action:
    module: ansible.builtin.get_url
    url: https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.tar.gz
    dest: /tmp/
    validate_certs: false
    

- name: Decompress pxeboot files from syslinux
  local_action:
    module: ansible.builtin.unarchive
    src: /tmp/syslinux-6.03.tar.gz
    dest: /tmp

- name: Copy files to the remote host
  ansible.builtin.copy: 
    src: /tmp/syslinux-6.03/bios/{{ item }}
    dest: /mnt/extstorage/tftp/
  loop: 
  - core/pxelinux.0 
  - com32/elflink/ldlinux/ldlinux.c32 
  - com32/menu/vesamenu.c32 
  - com32/lib/libcom32.c32 
  - com32/libutil/libutil.c32

- name: Copy Menu file to the router
  ansible.builtin.copy: 
    src: default
    dest: /mnt/extstorage/tftp/pxelinux.cfg/

- name: Configure DNSmasq to support TFTP
  uci: 
    command: set
    key: "dhcp.@dnsmasq[0].{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ dnsmasq }}"

- name: Remove BOOTP if it exists
  uci: 
    command: delete
    key: "dhcp.boot"
  ignore_errors: true

- name: Configure BOOTP
  uci: 
    command: set
    key: "dhcp.boot"
    value: "linux"

- name: Configure BOOTP
  uci: 
    command: set
    key: "dhcp.boot.{{ item.key }}"
    value: "{{ item.value }}"
  with_dict: "{{ bootp }}"

- name: Configure DHCP options
  uci: 
    command: add_list
    key: "dhcp.boot.dhcp_option"
    value: "{{ item }}"
  loop: "{{ dhcp_option }}"

# - name: Remove stale zone files from default config
#   file:
#     path: /var/named/{{ item }}
#     state: absent
#   loop:
#     - ocp4.example.com.db
#     - ocp4.example.com.reverse.db

# - name: Publish base named.conf
#   copy:
#     src: files/named.conf
#     dest: /etc/named.conf
#     mode: 0640
#     owner: root
#     group: named
#   notify:
#     - reload_named

# - name: Publish base forward and reverse zones
#   copy:
#     src: files/{{ item }}.zone
#     dest: /var/named/{{ item }}.zone
#     mode: 0640
#     owner: root
#     group: named
#   loop:
#     - ocp4.example.com
#     - 50.168.192.in-addr.arpa

# - name: Configure DNS to load the published zones
#   lineinfile:
#     path: /etc/named.conf
#     insertafter: "^# BEGIN ANSIBLE MANAGED DNS ZONES$"
#     line: 'zone "{{ item }}" { type master; file "{{ item }}.zone"; allow-update { none; }; };'
#     state: present
#   loop:
#     - ocp4.example.com
#     - 50.168.192.in-addr.arpa
#   notify:
#     - reload_named


# # chronyd fixes
# - name: Make sure chronyd is allowing time sync
#   lineinfile:
#     path: /etc/chrony.conf
#     line: "allow 192.168.50.0/24"
#     regexp: "^#?allow 192.168.*$"
#     state: present
#   notify:
#     - restart_chronyd

# # dhcpd configuration
# - name: Publish base dhcpd.conf
#   copy:
#     src: files/dhcpd.conf
#     dest: /etc/dhcp/dhcpd.conf
#     mode: 0644
#     owner: root
#     group: root
#   notify:
#     - restart_dhcpd

# # pxe boot config
# - name: Publish default PXE configuration file
#   copy:
#     src: files/default-pxe-config
#     dest: /var/lib/tftpboot/pxelinux.cfg/default
#     mode: 0644
#     owner: root
#     group: root

# - name: Make sure tftp.socket is enabled
#   service:
#     name: tftp.socket
#     enabled: yes



...
