---
# Deploys the infrastructure modifications needed to support a new DNS domain
# with some VMs booting in it:
#
# - DNS zone files
# - DNS zone configuration
# - bastion zone delegation
# - DHCP server modifications
#
# REQUIRES:
#  - variable "domain_name", pointing to one of the host clusters
#     (see defaults/main.yml for an example cluster data structure)
#
- name: Pre-flight check for domain publish.
  assert:
    fail_msg: "FATAL: domain_name must be defined and point to a cluster structure!"
    success_msg: "OK: domain_name is set and there are nodes."
    that:
      - domain_name is defined
      - clusters[domain_name] is defined
      - clusters[domain_name].nodes is defined
      - (clusters[domain_name].nodes) | length() > 0

- name: Publish forward DNS zone
  template:
    src: templates/dns.zone.j2
    dest: /var/named/{{ domain_name }}.example.com.zone
    mode: 0640
    owner: root
    group: named
  notify:
    - reload_named

- name: Configure DNS to load the published zone
  lineinfile:
    path: /etc/named.conf
    insertafter: "^# BEGIN ANSIBLE MANAGED DNS ZONES$"
    regexp: '^zone "{{ domain_name }}.example.com"'
    line: 'zone "{{ domain_name }}.example.com" { type master; file "{{ domain_name }}.example.com.zone"; allow-update { none; }; };'
    state: present
  notify:
    - reload_named

- name: Update reverse DNS zone
  lineinfile:
    path: /var/named/50.168.192.in-addr.arpa.zone
    insertafter: "^; BEGIN DYNAMIC 50 rZONE RECORDS$"
    regexp: "^{{ item.ip | regex_replace('^192.168.50.', '') }}      IN PTR"
    line: "{{ item.ip | regex_replace('^192.168.50.', '') }}      IN PTR {{ item.name }}.{{ item.cluster }}.example.com."
    state: present
  loop: "{{ clusters[domain_name].nodes }}"
  loop_control:
    label: "{{ item.name }}"
  register: zoneupdate

#- debug: var=zoneupdate

- name: Extract the serial if rzone was updated
  shell: grep -i serial /var/named/50.168.192.in-addr.arpa.zone | awk '{ print $1 }'
  register: rzone_serial_result
  when: zoneupdate.changed

- name: Bump up the serial if rzone was updated
  set_fact:
    rzone_serial: "{{ rzone_serial_result.stdout | int + 1 }}"
  when: zoneupdate.changed

- name: Update the serial number of reverse DNS zone
  lineinfile:
    path: /var/named/50.168.192.in-addr.arpa.zone
    regexp: "(?i); serial"
    line: "		{{ rzone_serial }} ; serial"
    state: present
  when: zoneupdate.changed
  notify:
    - reload_named

- name: Make sure DHCP server recognizes us
  lineinfile:
    path: /etc/dhcp/dhcpd.conf
    insertafter: "^# BEGIN ANSIBLE MANAGED DHCP CONFIG$"
    regexp: "(?i)hardware ethernet {{ item.mac | regex_replace('^01-', '') | regex_replace('-', ':') }}"
    line: 'host {{ item.name }}-{{ item.cluster }} { hardware ethernet {{ item.mac | regex_replace("^01-", "") | regex_replace("-", ":") }}; fixed-address {{ item.ip }}; option host-name "{{ item.name }}.{{ item.cluster }}.example.com"; option domain-name "{{ item.cluster }}.example.com"; option domain-search "{{ item.cluster }}.example.com"; option domain-name-servers 172.25.250.254; }'
    state: present
  loop: "{{ clusters[domain_name].nodes }}"
  loop_control:
    label: "{{ item.mac }}"
  notify: restart_dhcpd
...
